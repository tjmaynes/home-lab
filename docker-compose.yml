version: "3.8"

networks:
  proxy_network:
    external: true

  pihole_network:
    external: true

  monitoring_network:
    external: true

services:
  nginx-server:
    image: jc21/nginx-proxy-manager:2.9.18
    container_name: nginx-proxy
    restart: unless-stopped
    networks:
      - proxy_network
    ports:
      - 80:80
      - 443:443
      - 81:81
    volumes:
      - ${NGNIX_PROXY_MANAGER_BASE_DIRECTORY}/data:/data
      - ${NGNIX_PROXY_MANAGER_BASE_DIRECTORY}/letsencrypt:/etc/letsencrypt
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
      DISABLE_IPV6: "true"

  homer-web:
    image: b4bz/homer:v22.08.1
    container_name: homer-web
    restart: always
    networks:
      - proxy_network
    volumes:
      - ${HOMER_BASE_DIRECTORY}/www/assets:/www/assets
    environment:
      - INIT_ASSETS=0

  pihole-server:
    image: pihole/pihole:2022.10
    container_name: pihole-server
    restart: unless-stopped
    hostname: geck
    networks:
      pihole_network:
        ipv4_address: 192.168.5.200
    dns:
      - 1.1.1.1
      - 1.0.0.1
    ports:
      - target: 53
        published: 53
        protocol: tcp
      - target: 53
        published: 53
        protocol: udp
      - target: 67
        published: 67
        protocol: udp
      - target: 80
        published: 80
        protocol: tcp
      - target: 443
        published: 443
        protocol: tcp
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PIHOLE_BASE_DIRECTORY}/pihole/:/etc/pihole/
      - ${PIHOLE_BASE_DIRECTORY}/dnsmasq.d/:/etc/dnsmasq.d/
    environment:
      TZ: ${TIMEZONE}
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      DNSMASQ_LISTENING: all
      FTLCONF_LOCAL_IPV4: 192.168.5.200
      PIHOLE_DNS_: "192.168.5.201#5053;no"
    depends_on:
      - cloudflared-agent
    cap_add:
      - NET_ADMIN

  cloudflared-agent:
    image: cloudflare/cloudflared:2022.10.3
    container_name: cloudflared-agent
    restart: unless-stopped
    command: proxy-dns
    networks:
      pihole_network:
        ipv4_address: 192.168.5.201
    environment:
      TUNNEL_DNS_UPSTREAM: "https://1.1.1.1/dns-query,https://1.0.0.1/dns-query,https://9.9.9.9/dns-query"
      TUNNEL_DNS_PORT: 5053
      TUNNEL_DNS_ADDRESS: "0.0.0.0"

  plex-server:
    image: linuxserver/plex:1.30.1
    container_name: plex-server
    restart: unless-stopped
    network_mode: host
    ports:
      - 32400:32400
    volumes:
      - ${PLEX_BASE_DIRECTORY}/config:/config
      - ${PLEX_BASE_DIRECTORY}/transcode:/transcode
      - ${MEDIA_BASE_DIRECTORY}:/data
    environment:
      - PUID=${GECK_PUID}
      - PGID=${GECK_PGID}
      - TZ=${TIMEZONE}
      - CLAIM_TOKEN=${PLEX_CLAIM_TOKEN}

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:0.6.19
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - proxy_network
    environment:
      - PUID=${GECK_PUID}
      - PGID=${GECK_PGID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=linuxserver/mods:universal-calibre
    volumes:
      - ${CALIBRE_WEB_BASE_DIRECTORY}/config:/config
      - ${BOOKS_DIRECTORY}:/books

  audiobookshelf-web:
    image: ghcr.io/advplyr/audiobookshelf:2.2.12
    container_name: audiobookshelf-web
    restart: unless-stopped
    networks:
      - proxy_network
    environment:
      - AUDIOBOOKSHELF_UID=${GECK_PUID}
      - AUDIOBOOKSHELF_GID=${GECK_PGID}
    volumes:
      - ${AUDIOBOOKS_DIRECTORY}:/audiobooks
      - ${PODCASTS_DIRECTORY}:/podcasts
      - ${AUDIOBOOKSHELF_BASE_DIRECTORY}/config:/config
      - ${AUDIOBOOKSHELF_BASE_DIRECTORY}/metadata:/metadata

  pi-gallery-web:
    image: bpatrik/pigallery2:1.9.3-alpine
    container_name: pi-gallery-web
    restart: always
    networks:
      - proxy_network
    environment:
      - NODE_ENV=production
    volumes:
      - ${PIGALLERY_BASE_DIRECTORY}/config:/app/data/config
      - ${PIGALLERY_BASE_DIRECTORY}/db:/app/data/db
      - ${PIGALLERY_BASE_DIRECTORY}/tmp:/app/data/tmp
      - ${PHOTOS_DIRECTORY}:/app/data/images:ro

  codimd-db:
    image: postgres:11.6-alpine
    container_name: codimd-db
    restart: always
    command: postgres -c stats_temp_directory=/tmp
    networks:
      - proxy_network
    volumes:
      - ${CODIMD_DB_BASE_DIRECTORY}/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${CODIMD_DB_USERNAME}
      - POSTGRES_PASSWORD=${CODIMD_DB_PASSWORD}
      - POSTGRES_DB=codimd

  codimd-web:
    image: hackmdio/hackmd:2.4.2
    container_name: codimd-web
    restart: always
    networks:
      - proxy_network
    volumes:
      - ${CODIMD_BASE_DIRECTORY}/uploads:/home/hackmd/app/public/uploads
    environment:
      - CMD_DB_URL=${CODIMD_DB_URL}
      - CMD_DOMAIN=notes.${SERVICE_DOMAIN}
      - CMD_USECDN=false
    depends_on:
      - codimd-db

  gogs-web:
    image: gogs/gogs:0.12
    container_name: gogs-web
    restart: always
    networks:
      - proxy_network
    environment:
      - RUN_CROND=true
      - DOMAIN=git.${SERVICE_DOMAIN}
    volumes:
      - ${GOGS_BASE_DIRECTORY}/data:/data

  drawio-web:
    image: jgraph/drawio:20.5.3
    container_name: drawio-web
    restart: unless-stopped
    networks:
      - proxy_network
    environment:
      - LETS_ENCRYPT_ENABLED=false
      - PUBLIC_DNS=design.${SERVICE_DOMAIN}

  podgrab-web:
    image: akhilrex/podgrab:1.0.0
    container_name: podgrab-web
    restart: unless-stopped
    networks:
      - proxy_network
    environment:
      - CHECK_FREQUENCY=240
    volumes:
      - ${PODGRAB_BASE_DIRECTORY}/config:/config
      - ${PODCASTS_DIRECTORY}:/assets

  youtube-downloader-web:
    image: alexta69/metube:2022-10-05
    container_name: youtube-downloader-web
    restart: unless-stopped
    networks:
      - proxy_network #port: 8081
    volumes:
      - ${DOWNLOADS_DIRECTORY}/youtube:/downloads
    environment:
      UID: ${GECK_PUID}
      GID: ${GECK_PGID}

  home-assistant-web:
    image: ghcr.io/home-assistant/home-assistant:2022.11.2
    container_name: home-assistant-web
    restart: always
    networks:
      - proxy_network
    volumes:
      - ${HOME_ASSISTANT_BASE_DIRECTORY}/config:/config
    environment:
      - TZ=${TIMEZONE}

  nodered-web:
    image: nodered/node-red:2.2.3-12
    container_name: nodered-web
    restart: unless-stopped
    networks:
      - proxy_network
    volumes:
      - ${NODERED_BASE_DIRECTORY}/data:/data
    environment:
      - TZ=${TIMEZONE}

  nanomq-server:
    image: emqx/nanomq:0.12-slim
    container_name: nanomq-server
    restart: unless-stopped
    networks:
      - proxy_network
    environment:
      - NANOMQ_BROKER_URL="nmq-tcp://0.0.0.0:1883"

  media-filebrowser-web:
    image: filebrowser/filebrowser:s6
    container_name: media-filebrowser-web
    restart: unless-stopped
    networks:
      - proxy_network # 80
    volumes:
      - ${MEDIA_BASE_DIRECTORY}:/srv
      - ${MEDIAFILEBROWSER_BASE_DIRECTORY}/filebrowser.db:/database/filebrowser.db
      - ${MEDIAFILEBROWSER_BASE_DIRECTORY}/settings.json:/config/settings.json
    environment:
      - NANOMQ_BROKER_URL="nmq-tcp://0.0.0.0:1883"
      - PUID=${GECK_PUID}
      - PGID=${GECK_PGID}
      - TZ=${TIMEZONE}

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    pid: host
    command:
      - '--path.rootfs=/host'
    networks:
      - monitoring_network #9100
    volumes:
      - '/:/host:ro,rslave'

  prometheus-server:
    image: prom/prometheus:v2.40.1
    container_name: prometheus-server
    restart: unless-stopped
    user: ${MONITORING_PUID}:${MONITORING_PGID}
    networks:
      - proxy_network
      - monitoring_network #9090
    volumes:
      - ${PROMETHEUS_BASE_DIRECTORY}/data:/prometheus
      - ${PROMETHEUS_BASE_DIRECTORY}/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - node-exporter

  loki-server:
    image: grafana/loki:2.6.1
    container_name: loki-server
    restart: unless-stopped
    user: ${MONITORING_PUID}:${MONITORING_PGID}
    networks:
      - monitoring_network #3100
    volumes:
      - ${LOKI_BASE_DIRECTORY}/data/loki:/data/loki
      - ${LOKI_BASE_DIRECTORY}/config.yaml:/etc/loki/config.yaml
    command: -config.file=/etc/loki/config.yaml

  promtail-agent:
    image: grafana/promtail:2.7.0
    container_name: promtail-agent
    user: ${GECK_PUID}:${GECK_PGID}
    networks:
      - monitoring_network
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PROMTAIL_AGENT_BASE_DIRECTORY}/config.yaml:/etc/promtail/config.yaml
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki-server

  grafana-web:
    image: grafana/grafana-oss:9.3.1
    container_name: grafana-web
    user: ${MONITORING_PUID}:${MONITORING_PGID}
    networks:
      - proxy_network #3000
      - monitoring_network
    restart: unless-stopped
    volumes:
      - ${GRAFANA_BASE_DIRECTORY}:/var/lib/grafana
      - ${GRAFANA_BASE_DIRECTORY}/provisioning/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - loki-server
      - prometheus-server
